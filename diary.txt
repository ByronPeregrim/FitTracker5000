11/6 & 11/7:
- Login/Home page graphical interface created using HTML and CSS.
- Created a CSS class named 'hide' with styles display:none, width:0px, height:0px.
- Used Javascript to toggle this 'hide' class on/off specific elements when specific buttons are clicked
    in order to change the display on a web page without having to navigate to a new webpage, 
    making the page dynamic and interactive. This was done to increase speed of the website.
- Created a banner on the homepage with the project's name, Necessitivity. Used a green font 
    and chose green as the primary color of the website as green is reported to be a color that
    increases productivity, which is the main focus of the application. Added a dark green shadow to
    the main header for a pleasing visual effect.
- Added a Login and a Signup button. Added a grey background with a silver border to give a lifelike and 3d appearance.
- Added account recovery links below the Login/Signup buttons. Both lead to the same account recovery form.
- Added a hover effect to the Login/Signup buttons and account recovery links to give the page a 
    responsive and interactive feel for the user.
- Added function to the Login button that uses the 'hide' class to remove the Login/Signup button and account recovery
    links from view and instead display a form for login credentials, a back button, and a submit button.
- Added a focus effect to the login credential form fields to enhance page responsiveness. Made it green because
    it looks cool.
- Added hover effects to submit and back button to increase responsiveness.
- Added regex verification in javascript for login and password credentials to be checked before being
    sent to database for database verification.
- Added function to signup button to hide current display and show the account registration form.
- Created account registration form.
- Changed background of input fields to a light grey, easy on the eyes. Added hover effect to inputs 
    that increases brightness of background in order to increase responsiveness.
- Chose text inputs for height and weight due to ease of implementation and relative ease of use for user.
- Added frontend form validation in javascript. Checks regex, length, confirm password equality, etc.
- Added function to account recovery links to hide current display and show account recovery form.
- Account recovery form includes an email input field, a back button, and submit button. 
- Frontend form verification is left to html's default validation for type = email because it works well enough.
- That completes setting up the UI. Now it's time to link it to a database.
- I am going to try to use Node.js to link our UI to our database.
- Node.js was chosen due to its large 3rd party libraries which should make it easier to use. It was also 
    chosen in order to reduce the overall number of languages being used for this project, hopefully reducing its 
    overall complexity. PHP would be probably be a better choice for ease of use, but Node.js seems like a better
    learning opportunity at the time.
- I've decided to use a cloud server hosted database for this project so that all of the members of the team are able
    to work on the project's database remotely. MongoDB atlas was chosen to host this project as it was the most popular free
    database server host that was free and did not require a credit card.
- I created a free database collection on MongoDB Atlas and generated a username and password. I then received a connection string
    from MongoDB. I put the connection string in a .env file and used dotenv to hide the connection string when I upload
    this project to github.
- The node.js package, mongoose is used to connect to our cloud database.
- Express.js is used to interact with our database.